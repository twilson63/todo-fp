exports[`test Footer Component renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <footer
    className="footer">
    <ItemsLeft
        clearCompleted={[Function]}
        location={
            Object {
                "pathname": "/",
              }
        } />
    <ul
        className="filters">
        <FilterButton
            clearCompleted={[Function]}
            href="/"
            location={
                Object {
                    "pathname": "/",
                  }
            }
            text="All" />
        <FilterButton
            clearCompleted={[Function]}
            href="/active"
            location={
                Object {
                    "pathname": "/",
                  }
            }
            text="Active" />
        <FilterButton
            clearCompleted={[Function]}
            href="/completed"
            location={
                Object {
                    "pathname": "/",
                  }
            }
            text="Completed" />
    </ul>
    <button
        className="clear-completed"
        onClick={[Function]}>
        Clear completed
    </button>
</footer>,
  "nodes": Array [
    <footer
      className="footer">
      <ItemsLeft
            clearCompleted={[Function]}
            location={
                  Object {
                        "pathname": "/",
                      }
            } />
      <ul
            className="filters">
            <FilterButton
                  clearCompleted={[Function]}
                  href="/"
                  location={
                        Object {
                              "pathname": "/",
                            }
                  }
                  text="All" />
            <FilterButton
                  clearCompleted={[Function]}
                  href="/active"
                  location={
                        Object {
                              "pathname": "/",
                            }
                  }
                  text="Active" />
            <FilterButton
                  clearCompleted={[Function]}
                  href="/completed"
                  location={
                        Object {
                              "pathname": "/",
                            }
                  }
                  text="Completed" />
      </ul>
      <button
            className="clear-completed"
            onClick={[Function]}>
            Clear completed
      </button>
</footer>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Footer
        location={
                Object {
                        "pathname": "/",
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": _class {
        "_reactInternalInstance": [Circular],
        "cachedHandlers": Object {},
        "context": Object {},
        "handlers": Object {
          "clearCompleted": [Function],
        },
        "props": Object {
          "location": Object {
            "pathname": "/",
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <footer
          className="footer">
          <ItemsLeft
                    clearCompleted={[Function]}
                    location={
                              Object {
                                        "pathname": "/",
                                      }
                    } />
          <ul
                    className="filters">
                    <FilterButton
                              clearCompleted={[Function]}
                              href="/"
                              location={
                                        Object {
                                                  "pathname": "/",
                                                }
                              }
                              text="All" />
                    <FilterButton
                              clearCompleted={[Function]}
                              href="/active"
                              location={
                                        Object {
                                                  "pathname": "/",
                                                }
                              }
                              text="Active" />
                    <FilterButton
                              clearCompleted={[Function]}
                              href="/completed"
                              location={
                                        Object {
                                                  "pathname": "/",
                                                }
                              }
                              text="Completed" />
          </ul>
          <button
                    className="clear-completed"
                    onClick={[Function]}>
                    Clear completed
          </button>
</footer>,
        "_debugID": 2,
        "_renderedOutput": <footer
          className="footer">
          <ItemsLeft
                    clearCompleted={[Function]}
                    location={
                              Object {
                                        "pathname": "/",
                                      }
                    } />
          <ul
                    className="filters">
                    <FilterButton
                              clearCompleted={[Function]}
                              href="/"
                              location={
                                        Object {
                                                  "pathname": "/",
                                                }
                              }
                              text="All" />
                    <FilterButton
                              clearCompleted={[Function]}
                              href="/active"
                              location={
                                        Object {
                                                  "pathname": "/",
                                                }
                              }
                              text="Active" />
                    <FilterButton
                              clearCompleted={[Function]}
                              href="/completed"
                              location={
                                        Object {
                                                  "pathname": "/",
                                                }
                              }
                              text="Completed" />
          </ul>
          <button
                    className="clear-completed"
                    onClick={[Function]}>
                    Clear completed
          </button>
</footer>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Footer
    location={
        Object {
            "pathname": "/",
          }
    } />,
}
`;
