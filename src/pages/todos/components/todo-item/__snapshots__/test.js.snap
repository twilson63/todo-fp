exports[`test TodoItem Component renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <li
    className="
    
  ">
    <div
        className="view">
        <input
            checked={false}
            className="toggle"
            onChange={[Function]}
            type="checkbox" />
        <label
            onDoubleClick={[Function]}>
            foo
        </label>
        <button
            className="destroy"
            onClick={[Function]} />
    </div>
    <input
        className="edit"
        onBlur={[Function]}
        onChange={[Function]}
        value="foo" />
</li>,
  "nodes": Array [
    <li
      className="
    
  ">
      <div
            className="view">
            <input
                  checked={false}
                  className="toggle"
                  onChange={[Function]}
                  type="checkbox" />
            <label
                  onDoubleClick={[Function]}>
                  foo
            </label>
            <button
                  className="destroy"
                  onClick={[Function]} />
      </div>
      <input
            className="edit"
            onBlur={[Function]}
            onChange={[Function]}
            value="foo" />
</li>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <TodoItem
        todo={
                Object {
                        "completed": false,
                        "text": "foo",
                      }
        } />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": _class {
        "_reactInternalInstance": [Circular],
        "cachedHandlers": Object {
          "changeText": [Function],
          "editMode": [Function],
          "removeTodo": [Function],
          "toggleComplete": [Function],
        },
        "context": Object {},
        "handlers": Object {
          "cancelEdit": [Function],
          "changeText": [Function],
          "editMode": [Function],
          "removeTodo": [Function],
          "toggleComplete": [Function],
        },
        "props": Object {
          "todo": Object {
            "completed": false,
            "text": "foo",
          },
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <li
          className="
    
  ">
          <div
                    className="view">
                    <input
                              checked={false}
                              className="toggle"
                              onChange={[Function]}
                              type="checkbox" />
                    <label
                              onDoubleClick={[Function]}>
                              foo
                    </label>
                    <button
                              className="destroy"
                              onClick={[Function]} />
          </div>
          <input
                    className="edit"
                    onBlur={[Function]}
                    onChange={[Function]}
                    value="foo" />
</li>,
        "_debugID": 2,
        "_renderedOutput": <li
          className="
    
  ">
          <div
                    className="view">
                    <input
                              checked={false}
                              className="toggle"
                              onChange={[Function]}
                              type="checkbox" />
                    <label
                              onDoubleClick={[Function]}>
                              foo
                    </label>
                    <button
                              className="destroy"
                              onClick={[Function]} />
          </div>
          <input
                    className="edit"
                    onBlur={[Function]}
                    onChange={[Function]}
                    value="foo" />
</li>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <TodoItem
    todo={
        Object {
            "completed": false,
            "text": "foo",
          }
    } />,
}
`;
